ns3 installation video - https://www.youtube.com/watch?v=3U_sKkbSMjQ

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
COMMANDS

1) first do:

wsl -d ubuntu
cd ~
cd ns-allinone-3.43/ns-3.43

2) to run : 

./ns3 run distance_simulation
./ns3 run mec_simulation

3) to open explorer

explorer.exe .

4) To open file

nano scratch/distance_simulation.cc
nano scratch/mec_simulation.cc

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include "ns3/core-module.h"
#include "ns3/mobility-module.h"
#include "ns3/propagation-module.h"
#include "ns3/log.h"
#include "ns3/vector.h"
#include "ns3/constant-position-mobility-model.h"
#include "ns3/internet-module.h"
#include "ns3/point-to-point-module.h"
#include <fstream>
#include <iostream>
#include <sstream>
#include <string>
#include <cmath>

using namespace ns3;

NS_LOG_COMPONENT_DEFINE("RealMecSimulation");

// Function to calculate distance from signal strength using NS-3's Log-Distance Path Loss Model
double CalculateDistanceFromSignalStrength(double signalStrength, double frequency)
{
    Ptr<LogDistancePropagationLossModel> model = CreateObject<LogDistancePropagationLossModel>();

    // Configure the Log-Distance Model
    model->SetReference(1.0, 36.6);  // Reference distance (1m) and path loss at 1m for 3.5 GHz
    model->SetPathLossExponent(2.0); // Typical urban environment

    double txPowerDbm = 23.0;  // Assume the transmitter power is 23 dBm
    double pathLossDb = txPowerDbm - signalStrength; // Path loss (PL = TX - RX)

    // NS-3 provides the GetDistanceFromPathLoss method
    double distance = model->GetDistanceFromPathLoss(pathLossDb);

    return distance;
}

// Function to calculate distance from latency
double CalculateDistanceFromLatency(double latency)
{
    const double speedOfLightAir = 2.99e8; // Speed of radio waves in air (m/s)

    double latencyInSeconds = latency / 1000.0; // Convert ms to seconds
    double distance = latencyInSeconds * speedOfLightAir / 2.0; // Divide by 2 (Round-trip Time)

    return distance;
}

// Function to process the dataset and calculate distances
void ProcessDataset(const std::string &inputFile, const std::string &outputFile)
{
    std::ifstream inFile(inputFile);
    std::ofstream outFile(outputFile);
    std::string line;

    if (!inFile.is_open()) {
        std::cerr << "Error opening input file." << std::endl;
        return;
    }

    if (!outFile.is_open()) {
        std::cerr << "Error opening output file." << std::endl;
        return;
    }

    outFile << "User_ID,Distance" << std::endl;
    std::getline(inFile, line); // Skip header

    while (std::getline(inFile, line)) {
        std::istringstream iss(line);
        std::string userIdStr, appTypeStr, signalStrengthStr, latencyStr;

        std::getline(iss, userIdStr, ',');
        std::getline(iss, appTypeStr, ',');
        std::getline(iss, signalStrengthStr, ',');
        std::getline(iss, latencyStr, ',');

        try {
            double signalStrength = std::stod(signalStrengthStr);
            double latency = std::stod(latencyStr);
            double frequency = 3.5e9; // 3.5 GHz (5G mid-band)

            double distanceFromSignal = CalculateDistanceFromSignalStrength(signalStrength, frequency);
            double distanceFromLatency = CalculateDistanceFromLatency(latency);
            double combinedDistance = (distanceFromSignal + distanceFromLatency) / 2.0;

            outFile << userIdStr << "," << combinedDistance << std::endl;
        }
        catch (const std::exception &e) {
            std::cerr << "Error processing line: " << line << " - " << e.what() << std::endl;
        }
    }

    inFile.close();
    outFile.close();
}

int main(int argc, char *argv[])
{
    CommandLine cmd;
    std::string inputFile = "input.csv";
    std::string outputFile = "output.csv";
    cmd.AddValue("input", "Input dataset file", inputFile);
    cmd.AddValue("output", "Output dataset file", outputFile);
    cmd.Parse(argc, argv);

    NS_LOG_INFO("Starting Real MEC Simulation...");
    ProcessDataset(inputFile, outputFile);
    NS_LOG_INFO("Simulation Completed. Output saved to " << outputFile);

    return 0;
}
